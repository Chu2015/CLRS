钢条切割问题: 给定一段长度为n英寸的钢条和一个价格表pi(i=1,2,...n).求钢条切割方案,使得销售收益rn最大.
样例如下:
长度i	1	2	3	4	5	6	7	8	9	10
价格pi	1	5	8	9	10	17	17	20	24	30
以上表为例,则最佳的切割方案如下
r1 = 1, 切割方案1 = 1
r1 = 2, 切割方案2 = 2
r1 = 3, 切割方案3 = 3
r1 = 4, 切割方案4 = 2 + 2
r1 = 5, 切割方案5 = 2 + 3
r1 = 6, 切割方案6 = 6
r1 = 7, 切割方案7 = 1 + 6 或 7 = 2 + 2 + 3
r1 = 8, 切割方案8 = 2 + 6
r1 = 9, 切割方案9 = 3 + 6
r1 = 10, 切割方案10 = 10
更一般的,我们可以用公式来描述最大收益:
rn = max(pn, r1 + r(n-1), r2 + r(n-2),...,r(n-1) + r1)

自顶向下的实现伪代码如下:
CUT-ROD(p, n)
	if n == 0
		return 0
	q = 0
	for i = 1 to n
		q = max(q, p[i] + CUT-ROD(p, n - i))
	return q
具体实现C语言版:
// 钢条切割的递归方案
// 钢条的长度价格对应表:
// 长度i	1	2	3	4	5	6	7	8	9	10
// 价格pi	1	5	8	9	10	17	17	20	24	30
// 使用公式rn = max(pi + r(n-i)),1<=i<=n进行求解

#include <stdio.h>

int cutRod(int p[], int n);

int max(int a, int b)
{
    return (a > b ? a : b);
}
int main(void)
{
    int p[] = {0, 1, 5, 8, 9, 10, 17, 17, 20, 24, 30};
    int r = 0;

    for (int i = 1; i <= 10; i++) {
        r = cutRod(p, i);
        printf("i: %d, r: %d\n", i, r);
    }

    return 0;
}

int cutRod(int p[], int n)
{
    int q = 0;
    if (0 == n) {
        return 0;
    }

    for (int i = 1; i <= n; i++) {
        q = max(q, p[i] + cutRod(p, n - i));
    }

    return q;
}

但是这样效率异常的低下,因为它的复杂度为2^n.它把所有可能的分割方案全部查找出来进行比较.

使用动态规划方法求解最优钢条切割问题
	朴素递归算法之所以效率很低,是因为它反复求解相同的子问题.因此,动态规划方法仔细安排求解顺序,对每个子问题只求解一次,并将结果保存下来.如果随后再次需要此子问题的解,只需查找保存的结果,而不必重新计算.
一般有两种实现的方法:
1. 带备忘的自顶向下法: 按自然的递归形式编写过程,但过程会保存每个子问题的解.
2. 自底向上法: 定义子问题规模的概念,使得任何子问题的求解都只依赖于更小的子问题的求解.
自顶向下的伪代码如下:
MEMOIZED-CUT-ROD(p, n)
	for i = 0 to n
		r[i] = -1
	return MEMOIZED-CUT-ROD-AUX(p, n, r)
MEMOIZED-CUT-ROD-AUX(p, n, r)
	if r[n] >= 0:
		return r[n]
	if n == 0
		q = 0
	else
		q = -1
	for i = q to n:
		q = max(q, p[i] + MEMOIZED-CUT-ROD-AUX(p, n - i, r))
	r[n] = q
	return q
具体实现C语言版:
// 钢条切割的递归方案: 带备忘的自顶向下法
// 钢条的长度价格对应表:
// 长度i	1	2	3	4	5	6	7	8	9	10
// 价格pi	1	5	8	9	10	17	17	20	24	30
// 使用公式rn = max(pi + r(n-i)),1<=i<=n进行求解

#include <stdio.h>
#include <stdlib.h>

int memoizedCutRod(int p[], int n);
int memoizedCutRodAux(int p[], int n, int r[]);
int max(int a, int b)
{
    return (a > b ? a : b);
}
int main(void)
{
    int p[] = {0, 1, 5, 8, 9, 10, 17, 17, 20, 24, 30};
    int r = 0;

    for (int i = 1; i <= 10; i++) {
        r = memoizedCutRod(p, i);
        printf("i: %d, r: %d\n", i, r);
    }

    return 0;
}

int memoizedCutRod(int p[], int n)
{
    int *r = (int *)malloc(sizeof(int) * n);
    int i = 0;
    for (; i <= n; i++) {
         r[i] = -1;
    }

    return memoizedCutRodAux(p, n, r);
}

int memoizedCutRodAux(int p[], int n, int r[])
{
    int q = 0;
    if (r[n] >= 0) {
        return r[n];
    }
    if (0 == n) {
        return 0;
    }

    for (int i = 1; i <= n; i++) {
         q = max(q, p[i] + memoizedCutRodAux(p, n - i, r));
    }
    r[n] = q;
    return q;
}

自底向上的伪代码如下:
BOTTOM-UP-CUT-ROD(p, n)
	let r[0..n]be a new array
	r[0] = 0
	for j = 1 to n
		q = -1
		for i = 1 to j:
			q = max(q, p[i] + r[j - i])
		r[j] = q
	return r[n]
具体实现C语言版:
// 钢条切割的递归方案
// 钢条的长度价格对应表:
// 长度i	1	2	3	4	5	6	7	8	9	10
// 价格pi	1	5	8	9	10	17	17	20	24	30
// 使用公式rn = max(pi + r(n-i)),1<=i<=n进行求解

#include <stdio.h>
#include <stdlib.h>

int cutRod(int p[], int n);

int max(int a, int b)
{
    return (a > b ? a : b);
}
int main(void)
{
    int p[] = {0, 1, 5, 8, 9, 10, 17, 17, 20, 24, 30};
    int r = 0;

    for (int i = 1; i <= 10; i++) {
        r = cutRod(p, i);
        printf("i: %d, r: %d\n", i, r);
    }

    return 0;
}

int cutRod(int p[], int n)
{
    int *r = (int *)malloc(sizeof(int) * n);
    int q = 0;
    r[0] = 0;
    int i, j;

    for (j = 1; j <= n; j++) {
        q = -1;
        for (i = 1; i <= j; i++) {
            q = max(q, p[i] + r[j - i]);
        }
        r[j] = q;
    }
    return r[n];
}

但这些方案并没有给出最优解的方案,只是结果.我们可以保存其最优解的方案
// 钢条切割的递归方案
// 钢条的长度价格对应表:
// 长度i	1	2	3	4	5	6	7	8	9	10
// 价格pi	1	5	8	9	10	17	17	20	24	30
// 使用公式rn = max(pi + r(n-i)),1<=i<=n进行求解

#include <stdio.h>
#include <stdlib.h>

int cutRod(int p[], int n, int s[]);

int max(int a, int b)
{
    return (a > b ? a : b);
}
int main(void)
{
    int p[] = {0, 1, 5, 8, 9, 10, 17, 17, 20, 24, 30};
    int r = 0;
    int s[11];

    for (int i = 1; i <= 10; i++) {
        r = cutRod(p, i, s);
        printf("i: %d, r: %d=%d+%d\n", i, r, s[i], i - s[i]);
    }

    return 0;
}

int cutRod(int p[], int n, int s[])
{
    int *r = (int *)malloc(sizeof(int) * n);
    int q = 0;
    r[0] = 0;
    int i, j;

    for (j = 1; j <= n; j++) {
        q = -1;
        for (i = 1; i <= j; i++) {
            if (q < p[i] + r[j - i]) {
                q = p[i] + r[j - i];
                s[j] = i;
            }
        }
        r[j] = q;
    }
    return r[n];
}

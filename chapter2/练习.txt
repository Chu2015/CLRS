习题2.3-3:
n = 2^k时,T(n) = 2T(n/2) + n
k = k + 1, 则为2n时, T(2n) = 2T(n) + 2n = 2nlgn + 2n = 2nlg2n
所以成立.

习题2.3-4:
伪代码如下:
INSERT-SORT(int A[], int val, int len)
    for i = 1 to len:
	if A[i] > val:
	    break;
    for j = len to i + 1:
	A[j] = A[j - 1]
    A[i] = val

SORT(int A[], int index, int len)
    if index < len:
	INSERT-SORT(A, A[index + 1], index)
	SORT(A, index + 1, len)
具体实现C语言版:
#include <stdio.h>

void insertsort(int A[], int val, int len)
{
    int i = 0, j = 0;

    for (i = 0; i < len; i++) {
        if (A[i] > val) {
            break;
        }
    }
    for (j = len; j > i; j--) {
        A[j] = A[j - 1];
    }
    A[i] = val;
}

void sort(int A[], int index, int len)
{
    if (index < len) {
        insertsort(A, A[index], index);
        sort(A, index + 1, len);
    }
}

int main(void)
{
     int A[] = {9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
     int len = 10;
     int i = 0;

     sort(A, 0, len);

     for (i = 0; i < len; i++) {
          printf("%d ", A[i]);
     }
     printf("\n");

     return 0;
}

习题2.3-5:
二分查找法的伪代码如下:
BINARY-SEARCH(int A[], int start, int end, int val)
    if start == end
	return -1
    mid = (start + end) / 2
    if A[mid] > val:
	BINARY-SEARCH(A, start, mid, val)
    elif A[mid] < val:
	BINARY-SEARCH(A, mid + 1, end, val)
    else:
	return mid
具体实现C语言版:
#include <stdio.h>

int binarysearch(int A[], int start, int end, int val)
{
    int mid = (start + end) / 2;
    if (start == end) {
        return -1;
    }

    if (A[mid] > val) {
        return  binarysearch(A, start, mid, val);
    } else if(A[mid] < val) {
        return binarysearch(A, mid + 1, end, val);
    } else {
        return mid;
    }
}

int main(void)
{
    int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    int len = 9;

    printf("%d\n", binarysearch(A, 0, len, 6));
    printf("%d\n", binarysearch(A, 0, len, 66));

    return 0;
}


习题2.3-6:
答案为no. 因为就算使用二分查找法找到元素,也得进行移位.

习题2.3-7:
伪代码如下:
SUM-SEARCH(int A[], int start, int end, int val, int sum)
    if start == end:
        return -1
    mid = (start + end) / 2
    if (A[mid] + val < sum):
	return SUM-SEARCH(A, mid + 1, end, val, sum)
    elif A[mid] + val > sum:
	return SUM-SEARCH(A, start, mid, val, sum)
    else:
	return 1
SUM(int A[], int len, int sum)
    for i = 1 to len:
        if 1 == SUM-SEARCH(A, i, len, A[i], sum):
	    return 1
    return -1
具体实现C语言版:
#include <stdio.h>

int sumsearch(int A[], int start, int end, int val, int sum)
{
    int mid = (start + end) / 2;
    if (start == end) {
        return -1;
    }
    if (A[mid] + val < sum) {
        return sumsearch(A, mid + 1, end, val, sum);
    } else if (A[mid] + val > sum) {
        return sumsearch(A, start, mid, val, sum);
    }

    return 1;
}

int sum(int A[], int len, int sum) {
    int i = 0;
    for (i = 0; i < len; i++) {
        if (1 == sumsearch(A, i, len, A[i], sum)) {
            return 1;
        }
    }

    return -1;
}
int main(void)
{
    int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    int len = 9;

    printf("%d\n", sum(A, len, 6));
    printf("%d\n", sum(A, len, 66));

    return 0;
}



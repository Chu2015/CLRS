快速排序的描述(使用分治法思想):
分解: 数组A[p..r]被划分为两个(可能为空)子数组A[p..q-1]和A[q+1..r],使得A[p..q-1]中的每一个元素都小于等于A[q],而A[q]也小于等于A[q+1..r]中的每一个元素.其中,计算下表q也是划分过程的一部分.
解决: 通过递归调用快速排序,对子数组A[p..q-1]和A[q+1..r]进行排序.
合并: 因为子数组都是原址排序的,所以不需要合并操作:数组A[p..r]已经有序.
伪代码如下:
QUICKSORT(A, p, r)
	if p < r:
		q = PARTITION(A, p, r)
		QUICKSORT(A, p, q - 1)
		QUICKSORT(A, q + 1, r)
PARTITION(A, p, r)
	x = A[r]
	i = p - 1
	for j = p to r - 1:
		if A[j] <= x:
			i = i + 1
			exchange A[i] with A[j]
	exchange A[i + 1] with A[r]
	return i + 1
PARTITION的一个基本思想是: 总选择一个x = A[r]作为主元,并围绕它来划分子数组A[p..r].
具体实现C语言版:
#include <stdio.h>

int partition(int A[], int p, int r);

void swap(int *x, int *y)
{
    int temp = *x;
    *x = *y;
    *y = temp;
}

void quicksort(int A[], int p, int r)
{
    int q = 0;
    if (p < r) {
        q = partition(A, p, r);
        quicksort(A, p, q - 1);
        quicksort(A, q + 1, r);
    }
}

int partition(int A[], int p, int r)
{
    int x = A[r];
    int i = p - 1;
    int j = 0;
    for (j = p; j < r; j++) {
        if (A[j] <= x) {
            i = i + 1;
            swap(&A[i], &A[j]);
        }
    }
    swap(&A[i + 1], &A[r]);
    return i + 1;
}

int main(void)
{
     int arr[] = {13, 18, 2, 76, 12, 45, 1, 5, 2, 111, 321, 234, -1};
     int i = 0;
    quicksort(arr, 0, 12);

    for (i = 0; i < 13; i++) {
         printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}


